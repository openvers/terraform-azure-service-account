# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform Workflow Dispatch'

on:
    workflow_dispatch:
      inputs:
        terraform_operation:
          description: "Terraform operation: plan, apply, destroy"
          required: true
          default: "plan"
          type: choice
          options:
            - plan
            - apply
            - destroy

permissions:
  id-token: write
  contents: read
  issues: write

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

jobs:
    terraform:
      name: "terraform"
      runs-on: ubuntu-latest
      defaults:
        run:
          working-directory: "./test"

      steps:
        - name: Checkout Code
          uses: actions/checkout@v3
  
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            cli_config_credentials_token: ${{ secrets.TF_API_TOKEN_AZURE_WORKSPACE }}
  
        - name: Terraform init
          id: tf-init
          if: "${{ env.ARM_CLIENT_ID != '' && env.ARM_SUBSCRIPTION_ID != '' && env.ARM_TENANT_ID != ''}}"
          run: terraform init
  
        - name: Terraform plan
          run: terraform plan
          if: "${{ github.event.inputs.terraform_operation == 'plan' }}"
  
        - name: Terraform apply
          run: terraform apply --auto-approve
          if: "${{ github.event.inputs.terraform_operation == 'apply' }}"
  
        - name: Terraform destroy
          run: terraform destroy --auto-approve
          if: "${{ github.event.inputs.terraform_operation == 'destroy' }}"